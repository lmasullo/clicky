{"version":3,"sources":["components/Header.js","components/Instructions.js","components/Cards.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["styles","backgroundColor","height","color","fontSize","paddingLeft","paddingRight","Header","className","style","id","this","props","message","score","topscore","React","Component","backgroundImage","display","flexDirection","justifyContent","styleCenter","textAlign","styleLarge","fontWeight","paddingBottom","Instructions","width","margin","styleCont","flexWrap","scores","Cards","handleClick","event","isClickedID","currentTarget","isClicked","dataset","isclicked","clicked","console","log","updateClicked","updateScore","updateMessage","document","getElementById","classList","add","setTimeout","remove","correct","allImgs","querySelectorAll","i","length","zoom","shake","resetClicked","incorrect","shuffle","cards","arrCards","map","value","index","key","alt","name","src","image","data-isclicked","onClick","styleFoot","styleFoot2","position","bottom","paddingTop","Footer","App","state","setState","intClicked","parseInt","reset","newMessage","shuffleArray","sort","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9ff350e.chunk.js","sourcesContent":["/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/prop-types */\nimport React from 'react';\n\n// Inline CSS\nconst styles = {\n  backgroundColor: '#5133a4',\n  height: '80px',\n  color: 'white',\n  fontSize: '28px',\n  paddingLeft: '150px',\n  paddingRight: '70px',\n};\n\n// Header Component with props from App.js\nclass Header extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar fixed-top\" style={styles}>\n        <div>Clicky Game</div>\n        <div id=\"message\">{this.props.message}</div>\n        <div>\n          Score: {this.props.score} | Topscore: {this.props.topscore}\n        </div>\n      </nav>\n    );\n  }\n}\n\n// Export the component so it is available to others\nexport default Header;\n","import React from 'react';\n\n// Inline CSS\nconst styles = {\n  backgroundImage: 'url(../images/squares.svg)',\n  height: '380px',\n  color: 'white',\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n};\n\nconst styleCenter = {\n  textAlign: 'center',\n};\n\nconst styleLarge = {\n  fontSize: '4rem',\n  fontWeight: 'bold',\n  paddingBottom: '25px',\n};\n\n// Instructions Component\nclass Instructions extends React.Component {\n  render() {\n    return (\n      <div style={styles}>\n        <div style={styleCenter}>\n          <div style={styleLarge}>Clicky Game!</div>\n          <h2>\n            Click on an image to earn points, but don't click on any more than\n            once!\n          </h2>\n        </div>\n      </div>\n    );\n  }\n}\n\n// Export the component so it is available to others\nexport default Instructions;\n","/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/prop-types */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable no-plusplus */\n/* eslint-disable class-methods-use-this */\nimport React from 'react';\n\n// Import css for cards.js\nimport '../css/cards.css';\n\n// Inline CSS\nconst styles = {\n  height: '170px',\n  width: '170px',\n  margin: '20px',\n};\n\nconst styleCont = {\n  display: 'flex',\n  flexWrap: 'wrap',\n  width: '1000px',\n  justifyContent: 'center',\n};\n\n// Function that adds the shake class to all images for .5 seconds, then removes\nfunction shake() {\n  const allImgs = document.querySelectorAll('.img-thumbnail');\n  for (let i = 0; i < allImgs.length; i++) {\n    allImgs[i].classList.add('shake');\n  }\n  setTimeout(function() {\n    for (let i = 0; i < allImgs.length; i++) {\n      allImgs[i].classList.remove('shake');\n    }\n  }, 500);\n}\n\n// Function that adds the correct class to the message for .3 seconds, then removes\n// This changes the color of the message to Green\nfunction correct() {\n  const message = document.getElementById('message');\n  message.classList.add('correct');\n  setTimeout(function() {\n    message.classList.remove('correct');\n  }, 300);\n}\n\n// Function that adds the incorrect class to the message for .3 seconds, then removes\n// This changes the color of the message to Red\nfunction incorrect() {\n  const message = document.getElementById('message');\n  message.classList.add('incorrect');\n  setTimeout(function() {\n    message.classList.remove('incorrect');\n  }, 300);\n}\n\n// Function that adds the zoom class to all images for 1 second, then removes\nfunction zoom() {\n  const allImgs = document.querySelectorAll('.img-thumbnail');\n  for (let i = 0; i < allImgs.length; i++) {\n    allImgs[i].classList.add('zoom');\n  }\n  setTimeout(function() {\n    for (let i = 0; i < allImgs.length; i++) {\n      allImgs[i].classList.remove('zoom');\n    }\n  }, 1000);\n}\n\n// Create object to hold the scores to return to App.js\nconst scores = {\n  score: 0,\n  topscore: 0,\n};\n\n// Cards Component\nclass Cards extends React.Component {\n  // Use this syntax so we have access to 'this'\n  handleClick = event => {\n    // Get the id of the image clicked\n    const isClickedID = event.currentTarget.id;\n\n    // Get the value of isclicked from the clicked image, True or False\n    const isClicked = event.currentTarget.dataset.isclicked;\n\n    // Create the object to hold the response to send to updateClicked in App.js\n    const clicked = {\n      isClicked,\n      id: isClickedID,\n    };\n\n    // If not previously clicked, set as clicked, increment score,\n    // if score > top score, increment top score, and shuffle\n    if (isClicked === 'false') {\n      console.log('Image Clicked (cards.js) - Clicked status is False');\n\n      // Set the response object\n      clicked.isClicked = true;\n\n      // Call the updateClicked function in App.js\n      // Pass the id and true for isClicked\n      this.props.updateClicked(clicked);\n\n      // Increment the score\n      scores.score++;\n\n      // Check if the score is > topscore\n      if (scores.score > scores.topscore) {\n        // Increment topscore\n        scores.topscore++;\n        // console.log(scores.topscore);\n      }\n\n      // Send scores to updateScore in App.js\n      this.props.updateScore(scores);\n\n      // Change the message to Correct\n      this.props.updateMessage('You Guessed Correctly!');\n\n      // Call function that changes message color to Green\n      correct();\n\n      // Check if user got all 12 correct\n      if (scores.score === 12) {\n        console.log('Got all Correct');\n        // Call function that changes message to 'You Win'\n        this.props.updateMessage('You Guessed All Correctly, You Win!!');\n        // Call zoom\n        zoom();\n      }\n    } else {\n      console.log('Image Clicked (cards.js) - Its True');\n      // If already clicked, shake, and tell incorrect, reset score, leave top score alone\n      // Call Shake\n      shake();\n\n      // Reset the score, send to updateScore in App.js\n      scores.score = 0;\n      this.props.updateScore(scores);\n\n      // Reset all the isClicked to false, call the function in App.js\n      this.props.resetClicked();\n\n      // Change the message to Incorrect, send to updateMessage in App.js\n      this.props.updateMessage('You Guessed Incorrectly!');\n\n      // Call function in App.js that changes message color to Red\n      incorrect();\n    }\n\n    // Call the function in App.js that Shuffles the array\n    this.props.shuffle();\n  };\n\n  render() {\n    // Get the cards array from props\n    const cards = this.props.arrCards;\n\n    // Return this to App.js\n    return (\n      // Use <> to enclose all the children\n      <>\n        <div className=\"container\" style={styleCont}>\n          {/* Map over the cards arrays */}\n          {cards.map((value, index) => (\n            // Create the img tags\n            <img\n              key={index}\n              id={cards[index].id}\n              alt={cards[index].name}\n              src={cards[index].image}\n              data-isclicked={cards[index].isClicked}\n              className=\"img-thumbnail\"\n              style={styles}\n              // Handle the click event when the image is chosen, the function is inside this component\n              onClick={event => this.handleClick(event)}\n            />\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\n// Export the component so it is available to others\nexport default Cards;\n","import React from 'react';\n\n// Inline CSS\nconst styleFoot = {\n  backgroundColor: '#6956af',\n  height: '100px',\n  color: 'white',\n};\n\nconst styleFoot2 = {\n  backgroundColor: '#5133a4',\n  height: '40px',\n  width: '100%',\n  color: 'white',\n  fontWeight: 'bold',\n  fontSize: '16px',\n  position: 'absolute',\n  bottom: '0',\n  paddingTop: '10px',\n  paddingLeft: '10px',\n};\n\n// Footer Component\nclass Footer extends React.Component {\n  render() {\n    return (\n      <>\n        <footer className=\"footer fixed-bottom\" style={styleFoot}>\n          <div style={styleFoot2}>\n            Clicky Game!\n            <img\n              className=\"pl-1 pb-1\"\n              alt=\"React Clicky Game\"\n              src=\"../images/react.svg\"\n              height=\"20px\"\n              width=\"20px\"\n            ></img>\n          </div>\n        </footer>\n      </>\n    );\n  }\n}\n\n// Export the component so it is available to others\nexport default Footer;\n","/* eslint-disable no-plusplus */\n/* eslint-disable react/no-access-state-in-setstate */\n/* eslint-disable react/destructuring-assignment */\n/* eslint-disable prefer-destructuring */\nimport React from 'react';\n\n// Import the Components\nimport Header from './Header';\nimport Instructions from './Instructions';\nimport Cards from './Cards';\nimport Footer from './Footer';\n\n// Create the array of cards\nconst cards = [\n  {\n    id: 1,\n    name: 'beth',\n    image: './images/beth.png',\n    isClicked: false,\n  },\n  {\n    id: 2,\n    name: 'birdperson',\n    image: './images/birdperson.png',\n    isClicked: false,\n  },\n  {\n    id: 3,\n    name: 'evilmorty',\n    image: './images/evilmorty.png',\n    isClicked: false,\n  },\n  {\n    id: 4,\n    name: 'gianthead',\n    image: './images/gianthead.png',\n    isClicked: false,\n  },\n  {\n    id: 5,\n    name: 'goldenford',\n    image: './images/goldenford.png',\n    isClicked: false,\n  },\n  {\n    id: 6,\n    name: 'jerry',\n    image: './images/jerry.png',\n    isClicked: false,\n  },\n  {\n    id: 7,\n    name: 'jessica',\n    image: './images/jessica.png',\n    isClicked: false,\n  },\n  {\n    id: 8,\n    name: 'meeseeks',\n    image: './images/meeseeks.png',\n    isClicked: false,\n  },\n  {\n    id: 9,\n    name: 'morty',\n    image: './images/morty.png',\n    isClicked: false,\n  },\n  {\n    id: 10,\n    name: 'mr',\n    image: './images/mr.png',\n    isClicked: false,\n  },\n  {\n    id: 11,\n    name: 'rick',\n    image: './images/rick.png',\n    isClicked: false,\n  },\n  {\n    id: 12,\n    name: 'summer',\n    image: './images/summer.png',\n    isClicked: false,\n  },\n];\n\n// Set the initial Sate\nclass App extends React.Component {\n  state = {\n    score: 0,\n    topscore: 0,\n    message: 'Click an Image to Begin',\n    arrCards: cards,\n  };\n\n  // Function to update the Score/Topscore State\n  // Use this syntax to get the info from the child component\n  updateScore = scores => {\n    console.log('Update score');\n\n    // Take a copy of existing state\n    let score = { ...this.state.score };\n    let topscore = { ...this.state.topscore };\n\n    // Add new score and topscore to a variable\n    score = scores.score;\n    topscore = scores.topscore;\n\n    // Set new score state\n    this.setState({\n      score,\n      topscore,\n    });\n  };\n\n  // Function to update the isClicked on the card object\n  updateClicked = clicked => {\n    console.log('Update Clicked - App.js');\n\n    // Convert id to an integer\n    const intClicked = parseInt(clicked.id);\n    console.log(`Clicked Image ID: ${intClicked}`);\n\n    const isClicked = clicked.isClicked;\n    console.log(`Clicked Image Clicked Status: ${isClicked}`);\n\n    // Take a copy of state\n    //! the spread operator messes things up\n    // cards = { ...this.state.arrCards };\n    const arrCards = this.state.arrCards;\n\n    console.log(this.state.arrCards);\n\n    // Loop through array of cards\n    // Filter card to the clicked id\n    for (let i = 0; i < arrCards.length; i++) {\n      console.log(arrCards[i]);\n      if (arrCards[i].id === intClicked) {\n        console.log('Match in for loop');\n\n        // Set value\n        arrCards[i].isClicked = true;\n\n        // Set state\n        this.setState({ arrCards });\n      }\n    }\n  };\n\n  // Set all cards to isClicked = false, starting the game over\n  resetClicked = reset => {\n    console.log('Reset');\n    // Loop through array of cards\n    for (let i = 0; i < cards.length; i++) {\n      cards[i].isClicked = false;\n    }\n  };\n\n  // Update the message, Correct or Incorrect\n  updateMessage = newMessage => {\n    console.log('Update Message');\n    // Take a copy of existing state\n    let message = { ...this.state.message };\n\n    // Change value\n    message = newMessage;\n\n    // Update State\n    this.setState({ message });\n  };\n\n  // Shuffle the images after each choice\n  shuffle = shuffleArray => {\n    console.log('Shuffle Array');\n\n    // Shuffle the Array\n    function arrShuffle(array) {\n      array.sort(() => Math.random() - 0.5);\n    }\n\n    // Take a copy of state\n    const arrCards = this.state.arrCards;\n\n    // Call the above shuffle function\n    arrShuffle(arrCards);\n\n    // Set state\n    this.setState({ arrCards });\n  };\n\n  // React Render function\n  render() {\n    // Return Components/HTML to the index.html root div, uses index.js\n    return (\n      <div className=\"App\">\n        {/* Send state down to child components */}\n        <Header\n          score={this.state.score}\n          topscore={this.state.topscore}\n          message={this.state.message}\n        />\n        <Instructions />\n        <Cards\n          message={this.state.message}\n          arrCards={this.state.arrCards}\n          updateScore={this.updateScore}\n          updateClicked={this.updateClicked}\n          resetClicked={this.resetClicked}\n          updateMessage={this.updateMessage}\n          shuffle={this.shuffle}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\n// Export the component so it is available to others\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n// Tells React where the app will be rendered\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}